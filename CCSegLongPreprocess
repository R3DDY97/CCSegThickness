#!/usr/bin/python

# command line processing

import os
import sys
import numpy
import getopt
import errno

import shutil
import subprocess

import CCSegUtils

import CCSegSubjectSelection

import CCSegLong

import distutils.spawn

def criticalError(errorString):
	print "Error: " + str(errorString)
	quit()

def usage():
	print "Usage: " + sys.argv[0] + " [options] <input directory> <output directory>"
	print
	print "\tDESCRIPTION"
	print "\t\tLongitudinal preprocessing script. Registers all images to first timepoint for each subject then all images to the MNI152 template"
	print
	print "\tMANDATORY OPTIONS"
	print CCSegLong.longOptionText()
	print
	print CCSegLong.longOptionFileFormat()

	#CCSegSubjectSelection.printHelpText()

def criticalError(errorString):
	print "Error: " + str(errorString)
	quit()

def main():
	
	longOptStrings = ["long-subject-timepoint-file=", 'save-reg-to-first', 'parallel-mode=']
	longOptStrings.extend(CCSegSubjectSelection.getOptions())	
	opts, args = getopt.getopt(sys.argv[1:], "h", longOptStrings)
	
	# initialise options

	# mandatory arguments
	inputDirectory = None
	outputDirectory = None

	longSubjectTimepointFile = None
	saveRegToFirst = False
	# do the mandatory arguments first
	
	parallelMode = 'parallel'

	if len(args) != 2:
		print "The number of arguments must be 2"
		usage()
		exit()
	numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

	inputDirectory = args[0]
	outputDirectory = args[1]
	
	#print "inputDirectory = " + inputDirectory
	#print "outputDirectory = " + outputDirectory

	for o, a in opts:
		if o == '-h':
			usage()
			quit()
		if o == '--long-subject-timepoint-file':
			longSubjectTimepointFile = a
		if o == '--parallel-mode':
			parallelMode = a
		if o == '--save-reg-to-first':
			saveRegToFirst = True
	#for o, a in opts:
	
	if not os.path.isdir(inputDirectory):
		criticalError("The input directory specified was not found")
	
	if longSubjectTimepointFile == None:
		criticalError("The longitudinal file name was not given in the option --long-subject-timepoint-file")

	parallelModes = ['none', 'parallel']

	if not parallelMode in parallelModes:
		criticalError("Parallel mode not supported: " + parallelMode)
	
	if parallelMode == 'parallel':
		parallelExecutable = distutils.spawn.find_executable('parallel')
		if parallelExecutable == None:
			criticalError("Parallel mode was \"parallel\" but the parallel binary was not found")
	
	mainAndTimePoints, timePointsToReference = CCSegLong.loadLongSubjectFile(longSubjectTimepointFile)
	
	for curFile in timePointsToReference:
		if CCSegUtils.findNIFTIFromPrefix(os.path.join(inputDirectory, curFile)) == None:
			criticalError("One of the files in the long file was not in the input directory: " + curFile)

	try:
		os.makedirs(outputDirectory)
	except OSError as exc: # Python >2.5
		if exc.errno == errno.EEXIST and os.path.isdir(outputDirectory):
			pass
		else:
			raise Exception

	# set up initial commands for FLIRT
	D = 15

	flirtCost = 'mutualinfo'
	flirtInterp = 'trilinear'

	flirtBase = [os.environ['FSLDIR'] + '/bin/flirt', '-searchrx', str(-D), str(D), '-searchry', str(-D), str(D), '-searchrz', str(-D), str(D), '-cost', flirtCost, '-interp', flirtInterp]
#flirtBase = ['qsub', '-b', 'y', '-q', 'linux.q', '-V', '-cwd', '-N', 'IMAGEHD', os.environ['FSLDIR'] + '/bin/flirt', '-dof', '6', '-searchrx', str(-D), str(D), '-searchry', str(-D), str(D), '-searchrz', str(-D), str(D), '-cost', flirtCost, '-interp', flirtInterp]
	flirtApplyXFMBase = [os.environ['FSLDIR'] + '/bin/flirt', '-interp', flirtInterp, '-applyxfm']

	convertXFMBase = [os.environ['FSLDIR'] + '/bin/convert_xfm']
	
	parallelSwitch = '-j+0'

	if parallelMode == 'parallel':
		parallelPipe = subprocess.Popen(['parallel', parallelSwitch], stdin = subprocess.PIPE, stdout = subprocess.PIPE)

	#fp = open('commands', 'w')

	for curSubject in mainAndTimePoints.iterkeys():
		refFile = os.path.join(inputDirectory, mainAndTimePoints[curSubject][0] + '.nii.gz')

		for curTimePoint in range(1, len(mainAndTimePoints[curSubject])):
			inFile = os.path.join(inputDirectory, mainAndTimePoints[curSubject][curTimePoint])
			outPrefix = os.path.join(outputDirectory, mainAndTimePoints[curSubject][curTimePoint] + '_to_' + mainAndTimePoints[curSubject][0])
			
			if not os.path.isfile(outPrefix + '.mat'):
				#commandString = flirtApplyXFMBase[:]
				#commandString.extend(['-in', inFile, '-ref', refFile, '-out', outPrefix, '-init', outPrefix + '.mat'])
			#else:
				commandString = flirtBase[:]
				commandString.extend(['-in', inFile, '-ref', refFile, '-omat', outPrefix + '.mat', '-dof', '6'])
				if saveRegToFirst == True:
					commandString.extend(['-out', outPrefix])
			
				if parallelMode == 'none':
					subprocess.call(commandString)
				if parallelMode == 'parallel':
					parallelPipe.stdin.write(" ".join(commandString) + "\n")

			#print " ".join(commandString)
			#fp.write(" ".join(commandString) + "\n")
			#os.system(commandString)
			#subprocess.call(commandString)

	refFile = CCSegUtils.MNI152FLIRTTemplate()
# then register the first timepoint to MNI152

	for curSubject in mainAndTimePoints.iterkeys():
		inFile = os.path.join(inputDirectory, mainAndTimePoints[curSubject][0])
		outPrefix = os.path.join(outputDirectory, mainAndTimePoints[curSubject][0] + '_to_std')
		
		if not os.path.isfile(outPrefix + '.mat'):
			#commandString = flirtApplyXFMBase[:]
			#commandString.extend(['-in', inFile, '-ref', refFile, '-out', outPrefix, '-init', outPrefix + '.mat'])
		#else:
			commandString = flirtBase[:]
			commandString.extend(['-in', inFile, '-ref', refFile, '-omat', outPrefix + '.mat', '-out', outPrefix, '-dof', '7'])

			if parallelMode == 'none':
				subprocess.call(commandString)
			if parallelMode == 'parallel':
				parallelPipe.stdin.write(" ".join(commandString) + "\n")
		#fp.write(" ".join(commandString) + "\n")
#fp.close()
	if parallelMode == 'parallel':
		print "parallel, running registrations to first timepoints and template"
		parallelPipe.communicate()
		parallelPipe.stdin.close()
		print "parallel, finished"
	
	if parallelMode == 'parallel':
		parallelPipe = subprocess.Popen(['parallel', parallelSwitch], stdin = subprocess.PIPE, stdout = subprocess.PIPE)

# concatenate the transforms and put the other files in MNI152 space 
	refFile = CCSegUtils.MNI152FLIRTTemplate()
	for curSubject in mainAndTimePoints.iterkeys():
		firstMat = os.path.join(outputDirectory, mainAndTimePoints[curSubject][0] + '_to_std.mat') 

		for curTimePoint in range(1, len(mainAndTimePoints[curSubject])):
			outMat = os.path.join(outputDirectory, mainAndTimePoints[curSubject][curTimePoint] + '_to_std.mat')
			commandString = convertXFMBase[:]

			commandString.extend(['-omat', outMat, '-concat', firstMat, os.path.join(outputDirectory, mainAndTimePoints[curSubject][curTimePoint] + '_to_' + mainAndTimePoints[curSubject][0] + '.mat')])

			subprocess.call(commandString)
			
			commandString = flirtApplyXFMBase[:]
			inFile = os.path.join(inputDirectory, mainAndTimePoints[curSubject][curTimePoint])
			outPrefix = os.path.join(outputDirectory, mainAndTimePoints[curSubject][curTimePoint] + "_to_std")
			
			commandString.extend(['-in', inFile, '-ref', refFile, '-out', outPrefix, '-init', outMat])
			
			if parallelMode == 'none':
				subprocess.call(commandString)
			if parallelMode == 'parallel':
				parallelPipe.stdin.write(" ".join(commandString) + "\n")
			#print " ".join(commandString)
			#fp.write(" ".join(commandString) + "\n")
			#subprocess.call(commandString)
	#fp.close()
	if parallelMode == 'parallel':
		print "parallel, applying transforms"
		parallelPipe.communicate()
		parallelPipe.stdin.close()
		print "parallel, finished"
#def main():


if __name__ == "__main__":
	main()
