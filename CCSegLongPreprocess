#!/usr/bin/python

# command line processing

import os
import sys
import numpy
import getopt
import errno

import CCSegPipeThickness
import CCSegPipeMidSag
import CCSegPipeSeg
import CCSegPipeSegToNative
import CCSegUtils

import CCSegSubjectSelection
import traceback

def criticalError(errorString):
	print "Error: " + str(errorString)
	quit()

def usage():
	print "Usage: " + sys.argv[0] + " [options] <input directory> <output directory>"
	print
	print "\tDESCRIPTION"
	print
	print "\t\tFront end script for CC Segmentation and Thickness profile pipeline, processing components"
	print
	print "\t\tPerforms the following steps:"
	print "\t\t\t1. Midsagittal plane extraction"
	print "\t\t\t2. CC segmentation"
	print "\t\t\t3. Thickness profile generation"
	print "\t\t\t4 (optional). Projection of segmentation and parcellations back to native space"
	print
	print "The above steps may be executed with the following switches"
	print
	print "\tPROCESSING DIRECTIVES (do options)"
	print "\t\t--do-midsag: Step 1"
	print "\t\t--do-seg: Step 2"
	print "\t\t--do-thickness: Step 3"
	print "\t\t--do-segtonative: Step 4"
	print "\t\t--do-all: Steps 1, 2, 3, and 4"
	print "\t\t--do-thicknessmanedit: Step 3, but only process subjects that have manually edited segmentations"
	print
	print "\tOPTIONS"
	print "\t\t--num-thickness-nodes=(integer): the number of streamlines and thickness profiles to generate, 100 if not given"
	print "\t\t--msp-method=(string): the method to use for MSP extraction, supported values are 'flirt', 'acpcdetect' and 'long', 'acpcdetect' is the default if not specified"
	print "\t\t--redo-done: each processing step will not overwrite existing output, this forces existing output to be overwritten"
	print "\t\t--dilate-parasag: when performing the backprojection to native, dilate the segmentation and parcellations to the neighbouring parasagittal slices"
	print "\t\t--save-graphics: output graphics showing results of processing steps, look in subdirectories of output directory"
	print "\t\t--seg-no-lk: do not perform Lucas-Kanade tracking"
	print "\t\t--seg-no-auto: do not perform automatic segmentation, leave empty segmentation on midsagittal slice, use if all automatic options fail"
	print
	CCSegSubjectSelection.printHelpText()

def main():
	
	longOptStrings = ["num-thickness-nodes=", "msp-method=", "redo-done", "do-midsag", "do-seg", 'do-thickness', 'do-segtonative', 'do-all', 'do-thicknessmanedit', 'save-graphics', 'seg-no-lk', 'seg-no-auto', 'dilate-parasag']
	longOptStrings.extend(CCSegSubjectSelection.getOptions())	
	opts, args = getopt.getopt(sys.argv[1:], "h", longOptStrings)
	
	# initialise options

	# mandatory arguments
	inputDirectory = None
	outputDirectory = None
	
	# "Mode options"
	doMidsag = False
	doSeg = False
	doSegToNative = False
	doThickness = False
	doThicknessManedit = False

	MSPMethod = 'acpcdetect'
	numThicknessNodes = 100
	redoDone = False
	doGraphics = False
	dilateToParaSag = False
	
	quitOnError = False

	segLK = True
	segNoAuto = False

	longSubjectTimepointFile = None
	# do the mandatory arguments first

	if len(args) != 2:
		print "The number of arguments must be 2"
		usage()
		exit()
	numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

	inputDirectory = args[0]
	outputDirectory = args[1]
	
	#print "inputDirectory = " + inputDirectory
	#print "outputDirectory = " + outputDirectory

	for o, a in opts:
		if o == '-h':
			usage()
			quit()
		if o == '--msp-method':
			MSPMethod = a
		if o == '--num-thickness-nodes':
			try:
				numThicknessNodes = int(a)
			except ValueError:
				criticalError("the --num-thickness-nodes value was not an integer")
		if o == '--redo-done':
			redoDone = True
		if o == '--do-midsag':
			doMidsag = True
		if o == '--do-seg':
			doSeg = True
		if o == '--do-segtonative':
			doSegToNative = True
		if o == '--do-thickness':
			doThickness = True
		if o == '--do-all':
			doMidsag = True
			doSeg = True
			doSegToNative = True
			doThickness = True
		if o == '--do-thicknessmanedit':
			doThicknessManedit = True
		if o == '--save-graphics':
			doGraphics = True
		if o == '--seg-no-lk':
			segLK = False
		if o == '--seg-no-auto':
			segNoAuto = True
		if o == '--dilate-parasag':
			dilateToParaSag = True
		if o == '--long-subject-timepoint-file':
			longSubjectTimepointFile = a
	#for o, a in opts:

	# check to see if the user has given at least one of the MSP methods
	#if MSPMethod == "acpcdetect":
	#	print "Warning: the acpcdetect method does not yet give me backprojection to native space"
	
	MSPMethods = ['flirt', 'acpcdetect', 'long', 'none']

	if not MSPMethod in MSPMethods:
		criticalError("The MSP Method specified is unsupported")

	if numThicknessNodes <= 0:
		criticalError("The number of thickness nodes specified was not positive")
	
	if not os.path.isdir(inputDirectory):
		criticalError("The input directory specified was not found")
	
	if doMidsag == False and doSeg == False and doSegToNative == False and doThickness == False and doThicknessManedit == False:
		print "Error: No processing steps specified"
		usage()
		quit()
	
	if doMidsag == True and doSeg == False and doThickness == True:
		print "Warning: --do-midsag and --do-thickness were specified but the middle step --do-seg was not, setting --do-seg"
		doSeg = True
	
	actualInputFiles = CCSegSubjectSelection.selectSubjectsFromOpts(inputDirectory, opts = opts)
	if len(actualInputFiles) == 0:
		criticalError("No subjects to process")
	
	try:
		os.makedirs(outputDirectory)
	except OSError as exc: # Python >2.5
		if exc.errno == errno.EEXIST and os.path.isdir(outputDirectory):
			pass
		else:
			raise Exception
	#quit()
	#03_S_1122_sc_seg.hdf5
	#for curFile in inputNIFTIFiles:
	for curFile in sorted(actualInputFiles):
	#for curFile in ['003_S_1122_sc']:	
	#for curFile in ['051_S_1338_sc']:	
		#print "Current subject: " + curFile
		outputBase = os.path.join(outputDirectory, curFile)
		
		if doMidsag:
			if redoDone or not os.path.isfile(outputBase + "_midsag.hdf5"):
				try:
					CCSegPipeMidSag.midsagExtract(os.path.join(inputDirectory, curFile), outputBase, MSPMethod, doGraphics = doGraphics)
				except AssertionError as e:
					print "MidSag Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
				except Exception as e:
					print "Midsag Error: " + str(e) + ", subject " + outputBase
					print traceback.print_exc(file=sys.stdout)
					continue
		if doSeg:
			#print outputBase + "_midsag.hdf5"
			if redoDone or not os.path.isfile(outputBase + "_seg.hdf5"):
				if os.path.isfile(outputBase + "_seg_manedit.hdf5"):
					print "Found manedit: " + outputBase + "_seg_manedit.hdf5" + ", but redoing segmentation, deleting"
					try:
						os.remove(outputBase + "_seg_manedit.hdf5")
					except Exception as e:
						print "Couldnt delete manedit file: " + outputBase + "_seg_manedit.hdf5" + ", subject " + outputBase
						if quitOnError:
							quit()
						else:
							continue
				try:
					CCSegPipeSeg.segCC(outputBase, doGraphics = doGraphics, doLK = segLK, segNoAuto = segNoAuto)
				except AssertionError as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()	
					else:
						continue
				except Exception as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					continue
					
		if doThickness:
			if redoDone or not os.path.isfile(outputBase + "_thickness.hdf5"):
				try:
					print outputBase + "_seg.hdf5"
					CCSegPipeThickness.thicknessCC(outputBase, doGraphics = doGraphics)
				except AssertionError as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
				except Exception as e:
					print "CCSeg Thickness Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
	

		if doThicknessManedit and os.path.isfile(outputBase + "_seg_manedit.hdf5"):
			#print outputBase + "_seg.hdf5"
			if redoDone or not os.path.isfile(outputBase + "_thickness.hdf5"):
				try:
					CCSegPipeThickness.thicknessCC(outputBase, doGraphics = doGraphics)
				except AssertionError as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
				except Exception as e:
					print "CCSeg Thickness Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
	
		if doSegToNative and not doThicknessManedit:
			#print "doing segtonative"
			if os.path.isfile(outputBase + "_seg.hdf5") and (redoDone or not os.path.isfile(outputBase + "_native.nii.gz")):
				try:
					CCSegPipeSegToNative.segCCToNative(outputBase, dilateToParaSag = dilateToParaSag)
				except AssertionError as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
			#quit()	
		
		if doSegToNative and doThicknessManedit:
			#print "doing segtonative"
			if os.path.isfile(outputBase + "_seg.hdf5") and os.path.isfile(outputBase + "_seg_manedit.hdf5") and (redoDone or not os.path.isfile(outputBase + "_native.nii.gz")):
				try:
					CCSegPipeSegToNative.segCCToNative(outputBase, dilateToParaSag = dilateToParaSag)
				except AssertionError as e:
					print "CCSeg Error: " + str(e) + ", subject " + outputBase
					if quitOnError:
						quit()
					else:
						continue
			#quit()	


	#quit()

	#for curFile in inputNIFTIFiles:
#def main():


if __name__ == "__main__":
	main()
